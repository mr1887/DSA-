//Given an array of strings strs, group all anagrams together into sublists. You may return the output in any order.

//An anagram is a string that contains the exact same characters as another string, but the order of the characters can be different.

//Example 1:

//Input: strs = ["act","pots","tops","cat","stop","hat"]

//Output: [["hat"],["act", "cat"],["stop", "pots", "tops"]]
//Example 2:

//Input: strs = ["x"]

//Output: [["x"]]
//tạo hàm so sánh 2 String
//  tạo 1 mảng boolean visited để kiểm tra xem phần tử của strs đã được thêm vào 1 list chưa 
//  
class Solution {
   public boolean sosanh (String s , String t){
	    	        if (s.length() != t.length()) return false;
	    	        char[] ssort = s.toCharArray();
	    	        char[] tsort =t .toCharArray();
	    	        Arrays.sort(ssort);
	    	        Arrays.sort(tsort);
	    	        return Arrays.equals(ssort, tsort);
	    	    }
	public List<List<String>> groupAnagrams(String[] strs) {
	    	       List<List<String>> a = new ArrayList<>();
	    	       boolean[] visited = new boolean[strs.length];
	    	       for (int i =0; i < strs.length;i++) {
	    	    	   		List<String> b = new ArrayList<>();
	    	    	   		if (visited[i]) {
	    	    	   			continue;
	    	    	   		}
	    	    	   		else {
	    	    	   			b.add(strs[i]);
	    	    	   			visited[i] = true;
	    	    	   			for (int j = i+1 ; j < strs.length ;j++) {
	    	    	   				if(sosanh(strs[i], strs[j])) {
	    	    	   					b.add(strs[j]);
	    	    	   					visited[j]= true;
	    	    	   				}
	    	    	   			}
	    	    	   			a.add(b);
	    	    	   		}
	    	       }
	    	       return a;
	    	    }
}
// cách nghĩ đầu tiêu chạy lâu vl nên sẽ tìm cách tối ưu hơn

